var _api=require('../../sagas/api/api.saga');var _api2=_interopRequireDefault(_api);
var _dbKeys=require('../../../config/dbKeys.config');var _dbKeys2=_interopRequireDefault(_dbKeys);
var _localStorage=require('../../../utils/localStorage.util');var _localStorage2=_interopRequireDefault(_localStorage);
var _reduxSagaTesting=require('redux-saga-testing');var _reduxSagaTesting2=_interopRequireDefault(_reduxSagaTesting);
var _translations=require('../translations.saga');var _translations2=_interopRequireDefault(_translations);
var _effects=require('redux-saga/effects');
var _index=require('../../actions/index.actions');
var _apiHelper=require('../../../redux/sagas/api/apiHelper');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}

var cmsMockData={body:{
en:{},
th:{}}};



describe('translationSaga: Testing the root Saga',function(){
var it=(0,_reduxSagaTesting2.default)((0,_translations2.default)());
it('Should take the fetch translation action',function(result){
expect(result).toEqual((0,_effects.take)(_index.FETCH_TRANSLATIONS));
});
it('Should then call the fetchTranslations saga',function(result){
expect(result).toEqual((0,_effects.call)(_translations.fetchTranslations));
});
it('and then nothing',function(result){
expect(result).toBeUndefined();
});
});

describe('fetchTranslations: Testing the success case for Fetch Translations Saga',function(){
var it=(0,_reduxSagaTesting2.default)((0,_translations.fetchTranslations)());
it('Should call the api to fetch translations from cms which returns cms data',function(result){
expect(result).toEqual((0,_effects.call)(_api2.default,(0,_apiHelper.getTranslations)()));
return cmsMockData;
});
it('Should save the translations to localStorage when the api is sucess',function(result){
expect(result).toEqual((0,_effects.call)(_localStorage2.default.setItem,_dbKeys2.default.TRANSLATION_KEY,cmsMockData.body));
});
});

describe('fetchTranslations: Testing the failure case for Fetch Translations Saga',function(){
var it=(0,_reduxSagaTesting2.default)((0,_translations.fetchTranslations)());
it('Should call the api to fetch translations from cms which returns error',function(result){
expect(result).toEqual((0,_effects.call)(_api2.default,(0,_apiHelper.getTranslations)()));
return new Error('Api call failed');
});
it('Should fetch the translation from localStorage when api fails',function(result){
expect(result).toEqual((0,_effects.call)(_localStorage2.default.getItem,_dbKeys2.default.TRANSLATION_KEY));
});
});